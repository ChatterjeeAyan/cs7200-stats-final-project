ylim(0.5, 1.0) +
geom_errorbar(aes(y=PointEst, ymin=SeLower, ymax=SeUpper), width=.05) +
geom_point(aes(y=SProp)) +
labs(color="Hydrogen Donor Change", title="Model without Interaction", x="Volume Change", y="Probability of Disease (+-SE)")
# -------------------Assess Model Fit of Fitted Model---------------------
V_H_Df
total <- V_H_Df$Yes + V_H_Df$No
total
estimatedYes <- total*(1 - V_H_Df$PointEst)
estimatedYes
estimatedYes <- total*V_H_Df$PointEst
estimatedNo <- total*(1 - V_H_Df$PointEst)
estimatedYes
estimatedYes <- total*V_H_Df$PointEst
estimatedNo <- total*(1 - V_H_Df$PointEst)
estimated <- c(estimatedYes, estimatedNo)
observed<- c(V_H_Df$Yes, V_H_Df$No)
estimated
observed
pearson_stat <- sum( (observed-estimated)^2 / estimated )
# df = number of settings of x (i.e. params is saturated model) - number of params in model
pearson_p <- pchisq(pearson_stat, 4-3)
c(pearson_stat, pearson_p)
# Run G-Squared likelihood ratio aginst fitted values
exp(-.7195)
# Run G-Squared likelihood ratio aginst fitted values
# odds of disease for no change in volume and no change in H Donor Status
exp(b0)
exp(-.7195)
# Run G-Squared likelihood ratio aginst fitted values
# odds of disease for no change in volume and no change in H Donor Status
b0
# -------------------Assess Model Fit of Fitted Model---------------------
V_H_Df
# plot fitted values
ggplot(data=V_H_Df, aes(x=factor(Volume), y=value, group=factor(HDonor), color=factor(HDonor)) ) +
geom_line(aes(y=PointEst)) +
ylim(0.5, 1.0) +
geom_errorbar(aes(y=PointEst, ymin=SeLower, ymax=SeUpper), width=.05) +
geom_point(aes(y=SProp)) +
labs(color="Hydrogen Donor Change", title="Model without Interaction", x="Volume Change", y="Probability of Disease (+-SE)")
V_H_Df
total <- V_H_Df$Yes + V_H_Df$No
total
estimatedYes <- total*V_H_Df$PointEst
estimatedNo <- total*(1 - V_H_Df$PointEst)
estimated <- c(estimatedYes, estimatedNo)
observed<- c(V_H_Df$Yes, V_H_Df$No)
estimated
observed
pearson_stat <- sum( (observed-estimated)^2 / estimated )
# df = number of settings of x (i.e. params is saturated model) - number of params in model
pearson_p <- pchisq(pearson_stat, 4-3)
c(pearson_stat, pearson_p)
# Run G-Squared likelihood ratio aginst fitted values
# odds of disease for no change in volume and no change in H Donor Status
G_squared <- 2 * sum(observed * log(observed/estimated))
G_squared_p <- pchisq(G_squared, 4-3)
c(G_squared, G_squared_p)
getWaldSummary <- function (b, se) {
odds <- exp(b)
L <- exp(b - 1.96*se)
U <- exp(b + 1.96*se)
waldStat <- (b/se)^2
pWald <- pchisq(waldStat, 1)
return( c(odds, L, U, waldStat, pWald) )
}
getWaldSummary(b0, se0)
getWaldSummary(b1, se1)
getWaldSummary(b2, se2)
# Functions to compare log-likelihood of the fitted model and the actual model
getSampleProportion <- function(no, yes) { return(round(yes/ (no + yes), 3)) }
getPointEstimate <- function(beta, se) { return(exp(beta) / (1+exp(beta))) }
getSeLower <- function(beta, se) { return(exp(beta-se) / (1+exp(beta-se))) }
getSeUpper <- function(beta, se) { return(exp(beta+se) / (1+exp(beta+se))) }
getOdds <- function(beta) {return (exp(beta)) }
getL <- function(beta, se) {return (exp(beta - 1.96*se)) }
getU <- function(beta, se) { return (exp(beta + 1.96*se)) }
getEstimatedEffects <- function(df) {
for (i in 1:nrow(df)) {
df$SProp[i] <- getSampleProportion(df$No[i], df$Yes[i])
df$PointEst[i] <- getPointEstimate(df$Beta[i], df$SE[i])
df$SeLower[i] <- getSeLower(df$Beta[i], df$SE[i])
df$SeUpper[i] <- getSeUpper(df$Beta[i], df$SE[i])
df$Odds[i] <- getOdds(df$Beta[i], df$SE[i])
df$WaldCIEffectL[i] <- getL(df$Beta[i], df$SE[i])
df$WaldCIEffectU[i] <- getU(df$Beta[i], df$SE[i])
}
return(df)
}
# Determine fitted values
ctable <- ftable(mutations_small)
ctable
summary(fit_V_H)
b0 <- fit_V_H$coefficients[1]
b1 <- fit_V_H$coefficients[2]
b2 <- fit_V_H$coefficients[3]
se0 <- 0.1700
se1 <- 0.1664
se2 <- 0.1406
V_H_Df <- data.frame(Volume=c(0, 0, 1, 1),
HDonor=c(0, 1, 0, 1),
No=ctable[,1],
Yes=ctable[,2],
Beta=c(b0, b0+b2, b0+b1, b0+b1+b2),
SE=c(se0, max(se0, se2), max(se0, se1), max(se0, se1, se2))
)
V_H_Df <- getEstimatedEffects(V_H_Df)
V_H_Df
# plot fitted values
ggplot(data=V_H_Df, aes(x=factor(Volume), y=value, group=factor(HDonor), color=factor(HDonor)) ) +
geom_line(aes(y=PointEst)) +
ylim(0.5, 1.0) +
geom_errorbar(aes(y=PointEst, ymin=SeLower, ymax=SeUpper), width=.05) +
geom_point(aes(y=SProp)) +
labs(color="Hydrogen Donor Change", title="Model without Interaction", x="Volume Change", y="Probability of Disease (+-SE)")
getSampleProportion <- function(no, yes) { return(round(yes/ (no + yes), 3)) }
getPointEstimate <- function(beta, se) { return(exp(beta) / (1+exp(beta))) }
getSeLower <- function(beta, se) { return(exp(beta-se) / (1+exp(beta-se))) }
getSeUpper <- function(beta, se) { return(exp(beta+se) / (1+exp(beta+se))) }
getOdds <- function(beta) {return (exp(beta)) }
getL <- function(beta, se) {return (exp(beta - 1.96*se)) }
getU <- function(beta, se) { return (exp(beta + 1.96*se)) }
getEstimatedEffects <- function(df) {
for (i in 1:nrow(df)) {
df$SProp[i] <- getSampleProportion(df$No[i], df$Yes[i])
df$PointEst[i] <- getPointEstimate(df$Beta[i], df$SE[i])
df$SeLower[i] <- getSeLower(df$Beta[i], df$SE[i])
df$SeUpper[i] <- getSeUpper(df$Beta[i], df$SE[i])
df$Odds[i] <- getOdds(df$Beta[i], df$SE[i])
df$WaldCIEffectL[i] <- getL(df$Beta[i], df$SE[i])
df$WaldCIEffectU[i] <- getU(df$Beta[i], df$SE[i])
}
return(df)
}
ctable <- ftable(mutations_small)
ctable
summary(fit_V_H)
b0 <- fit_V_H$coefficients[1]
b1 <- fit_V_H$coefficients[2]
b2 <- fit_V_H$coefficients[3]
se0 <- 0.1700
se1 <- 0.1664
se2 <- 0.1406
V_H_Df <- data.frame(Volume=c(0, 0, 1, 1),
HDonor=c(0, 1, 0, 1),
No=ctable[,1],
Yes=ctable[,2],
Beta=c(b0, b0+b2, b0+b1, b0+b1+b2),
SE=c(se0, max(se0, se2), max(se0, se1), max(se0, se1, se2))
)
V_H_Df <- getEstimatedEffects(V_H_Df)
getEstimatedEffects <- function(df) {
for (i in 1:nrow(df)) {
df$SProp[i] <- getSampleProportion(df$No[i], df$Yes[i])
df$PointEst[i] <- getPointEstimate(df$Beta[i], df$SE[i])
df$SeLower[i] <- getSeLower(df$Beta[i], df$SE[i])
df$SeUpper[i] <- getSeUpper(df$Beta[i], df$SE[i])
df$Odds[i] <- getOdds(df$Beta[i])
df$WaldCIEffectL[i] <- getL(df$Beta[i], df$SE[i])
df$WaldCIEffectU[i] <- getU(df$Beta[i], df$SE[i])
}
return(df)
}
# Determine fitted values
ctable <- ftable(mutations_small)
ctable
summary(fit_V_H)
b0 <- fit_V_H$coefficients[1]
b1 <- fit_V_H$coefficients[2]
b2 <- fit_V_H$coefficients[3]
se0 <- 0.1700
se1 <- 0.1664
se2 <- 0.1406
V_H_Df <- data.frame(Volume=c(0, 0, 1, 1),
HDonor=c(0, 1, 0, 1),
No=ctable[,1],
Yes=ctable[,2],
Beta=c(b0, b0+b2, b0+b1, b0+b1+b2),
SE=c(se0, max(se0, se2), max(se0, se1), max(se0, se1, se2))
)
V_H_Df <- getEstimatedEffects(V_H_Df)
V_H_Df
# plot fitted values
ggplot(data=V_H_Df, aes(x=factor(Volume), y=value, group=factor(HDonor), color=factor(HDonor)) ) +
geom_line(aes(y=PointEst)) +
ylim(0.5, 1.0) +
geom_errorbar(aes(y=PointEst, ymin=SeLower, ymax=SeUpper), width=.05) +
geom_point(aes(y=SProp)) +
labs(color="Hydrogen Donor Change", title="Model without Interaction", x="Volume Change", y="Probability of Disease (+-SE)")
V_H_Df
total <- V_H_Df$Yes + V_H_Df$No
total
estimatedYes <- total*V_H_Df$PointEst
estimatedNo <- total*(1 - V_H_Df$PointEst)
estimated <- c(estimatedYes, estimatedNo)
observed<- c(V_H_Df$Yes, V_H_Df$No)
estimated
observed
pearson_stat <- sum( (observed-estimated)^2 / estimated )
# df = number of settings of x (i.e. params is saturated model) - number of params in model
pearson_p <- pchisq(pearson_stat, 4-3)
c(pearson_stat, pearson_p)
# Run G-Squared likelihood ratio aginst fitted values
# odds of disease for no change in volume and no change in H Donor Status
G_squared <- 2 * sum(observed * log(observed/estimated))
G_squared_p <- pchisq(G_squared, 4-3)
c(G_squared, G_squared_p)
# Wald Test for each B_k, H0: B_k = 0
# Has Chi-Squared distribution with df=1
getWaldSummary <- function (b, se) {
waldStat <- (b/se)^2
pWald <- pchisq(waldStat, 1)
return( c(waldStat, pWald) )
}
getWaldSummary(b0, se0)
getWaldSummary(b1, se1)
getWaldSummary(b2, se2)
pchisq(6.6507, 1)
pchisq(1-6.6507, 1)
pchisq(16.6705, 1)
1-pchisq(6.6507, 1)
1-pchisq(16.6705, 1)
1-pchisq(.0370, 1)
1-pchisq(2.485, 1)
getWaldSummary <- function (b, se) {
waldStat <- (b/se)^2
pWald <- 1 - pchisq(waldStat, 1)
return( c(waldStat, pWald) )
}
getWaldSummary(b0, se0)
getWaldSummary(b1, se1)
getWaldSummary(b2, se2)
# confidence intervals on parameter estimates
confint(fit_V_H)
summary(fit_V_H)
# confidence intervals on parameter estimates
confint(fit_V_H)
V_H_Df
getWaldSummary(b0, se0)
getWaldSummary(b1, se1)
getWaldSummary(b2, se2)
library(ROCR)
# select training set (as example, here only use 1/4 of the data to build the model)
train <- sample(x=1:nrow(mutations_small), size=nrow(mutations_small)/4)
# fit the full model on the training dataset
fit.train <- glm(disease ~vol + hDonor + vol*hDonor, family=binomial, data=mutations_small[train,])
summary(fit.train)
summary(fit_V_H_VH)
# calculate predicted probabilities on the same training set
scores <- predict(fit.train, newdata=mutations_small[train,], type="response")
# compare predicted probabilities to labels, for varying probability cutoffs
pred <- prediction(scores, labels=mutations_small[train,]$disease )
perf <- performance(pred, "tpr", "fpr")
# plot the ROC curve
plot(perf, colorize=F, main="In-sample ROC curve")
# print out the area under the curve
unlist(attributes(performance(pred, "auc"))$y.values)
train <- sample(x=1:nrow(mutations_small), size=nrow(mutations_small)/3)
# fit the full model on the training dataset
fit.train <- glm(disease ~vol + hDonor + vol*hDonor, family=binomial, data=mutations_small[train,])
summary(fit.train)
summary(fit_V_H_VH)
# calculate predicted probabilities on the same training set
scores <- predict(fit.train, newdata=mutations_small[train,], type="response")
# compare predicted probabilities to labels, for varying probability cutoffs
pred <- prediction(scores, labels=mutations_small[train,]$disease )
perf <- performance(pred, "tpr", "fpr")
# plot the ROC curve
plot(perf, colorize=F, main="In-sample ROC curve")
# print out the area under the curve
unlist(attributes(performance(pred, "auc"))$y.values)
scores <- predict(fit.train, newdata=mutations_small[-train,], type="response")
pred <- prediction( scores, labels=mutations_small[-train,]$disease )
perf <- performance(pred, "tpr", "fpr")
# overlay the line for the ROC curve
plot(perf, colorize=T, add=TRUE)
# print out the area under the curve
unlist(attributes(performance(pred, "auc"))$y.values)
mutations = read.csv("Data/Sequential_Merged_With_Pockets.csv", header=TRUE)[ ,c('Pocket_A', 'Pocket_G', 'Pocket_GearyAuto_AvFlexibility30')]
pockets = read.csv("Data/Sequential_Merged_With_Pockets.csv", header=TRUE)[ ,c('Pocket_A', 'Pocket_G', 'Pocket_GearyAuto_AvFlexibility30')]
head(pockets)
pockets = read.csv("Data/Sequential_Merged_With_Pockets.csv", header=TRUE)[ ,c('Pocket_A', 'Pocket_G', 'Pocket_GearyAuto_AvFlexibility30', 'Class',	'X2',	'X3',	'X2X3')]
head(pockets)
pockets = read.csv("Data/Sequential_Merged_With_Pockets.csv", header=TRUE)[ ,c('FromAA', 'ToAA', 'Pocket_A', 'Pocket_G', 'Pocket_GearyAuto_AvFlexibility30', 'Class',	'X2',	'X3',	'X2X3')]
head(pockets)
pocketsReduced <- subset(pockets, FromAA!='X')
dim(pockets)
dim(pocketsReduced)
head(pockets)
dim(pockets)
pocketsReduced <- subset(pockets, FromAA!='X')
dim(pocketsReduced)
pocketsReduced <- subset(pockets, FromAA == 'X')
dim(pocketsReduced)
dim(pockets)
pocketsReduced <- pockets[pockets$FromAA == 'X']
dim(pocketsReduced)
pocketsReduced <- pockets[pockets$FromAA == 'X', ]
dim(pocketsReduced)
pockets[pockets$FromAA == 'X', ]
head(pockets)
dim(pockets)
pocketsReduced <- pockets[pockets$FromAA == 'X', ]
dim(pocketsReduced)
pockets
library(dplyr)
pockets %>% filter(pockets.FromAA == 'X')
head(pockets)
'test' == 'test'
pockets$FromA
pockets$FromAA
pockets$FromAA=='A'
pockets$FromAA=='X'
pockets$FromAA=='X' == TRUE
head(pockets)
dim(pockets)
pocketsReduced <- pockets[pockets$ToAA == 'X', ]
dim(pocketsReduced)
pocketsReduced <- pockets[pockets$ToAA != 'X', ]
pockets
dim(pocketsReduced)
dim(pockets)
pocketsReduced <- pockets[(pockets$FromAA != 'X') && (pockets$ToAA != 'X'), ]
dim(pocketsReduced)
pocketsReduced <- pockets[(pockets$FromAA != 'X') & (pockets$ToAA != 'X'), ]
dim(pocketsReduced)
head(pocketsReduced)
library(faraway)
data(orings)
plot(damage/6 ~ temp, orings, xlim=c(25,85),ylim=c(0,1),
xlab="Temperature",ylab="Proportion of damage", pch=16)
head(pocketsReduced)
# group the
newOrings <- data.frame(temp=seq(from=10, to=100, length=10))
newOrings
# 10 predictions for the mean response and their se
newOrings.predict <- predict(fit, newdata=newOrings, se.fit=T, type="response")
# ----------Fit (specify 2 responses: # of 1s and # of 0s)-------------
# Required when data are in form of Binomial distribution (as opposed to Bernouilli)
fit <- glm(cbind(damage, 6-damage) ~ temp, family=binomial, data=orings)
# 10 predictions for the mean response and their se
newOrings.predict <- predict(fit, newdata=newOrings, se.fit=T, type="response")
newOrings.predict
table(newOrings)
table(orings)
newOrings.predict$fit
newOrings
orings
head(pockets)
dim(pockets)
# filter out any unknown amino acids
pockets <- pockets[(pockets$FromAA != 'X') & (pockets$ToAA != 'X'), ]
dim(pockets)
# group the data by categories
range(pockets$Pocket_A)
pockets$pocketA = floor(pockets$Pocket_A)
head(pockets)
range(pockets$Pocket_G)
range(pockets$Pocket_GearyAuto_AvFlexibility30)
signif(6.9889745, digits = 2)
signif(6.9889745, digits = 3)
round(6.9889745, digits = 3)
round(6.9889745, digits = 2)
range(pockets$Pocket_GearyAuto_AvFlexibility30)
table(pockets$Pocket_GearyAuto_AvFlexibility30)
pockets$pocketA = floor(pockets$Pocket_A)
pockets$pocketG = floor(pockets$Pocket_G)
pockets$pocketGeary = round(pockets$Pocket_GearyAuto_AvFlexibility30, 2)
head(pockets)
table(pockets$pocketGeary)
table(pockets$Pocket_GearyAuto_AvFlexibility30)
table(pockets$pocketGeary)
pockets$pocketGeary = round(pockets$Pocket_GearyAuto_AvFlexibility30, 1)
table(pockets$pocketGeary)
table(pockets$pocketA)
table(pockets$pocketG)
table(pockets$pocketGeary)
3 %/% 2
4 %/% 2
4.5 %/% 2
pockets$pocketA = pockets$Pocket_A%/%2 *2
table(pockets$pocketA)
pockets$pocketA = pockets$Pocket_A%/%2 * 2
pockets$pocketG = pockets$Pocket_G%/%2 * 2
table(pockets$pocketA)
table(pockets$pocketG)
table(pockets$pocketGeary)
pockets$pocketGeary = round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10 %% 2 * 2 /10
table(pockets$pocketGeary)
pockets$pocketGeary = ((pockets$Pocket_GearyAuto_AvFlexibility30 * 10) %% 2 * 2) / 10
table(pockets$pocketGeary)
pockets$pocketGeary = (pockets$Pocket_GearyAuto_AvFlexibility30 * 10)
table(pockets$pocketGeary)
pockets$pocketGeary = round(pockets$Pocket_GearyAuto_AvFlexibility30) * 10)
pockets$pocketGeary = round(pockets$Pocket_GearyAuto_AvFlexibility30) * 10
table(pockets$pocketGeary)
pockets$pocketGeary = round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10
table(pockets$pocketGeary)
pockets$pocketGeary = ((round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10) %% 2 * 2) / 10
table(pockets$pocketGeary)
pockets$pocketGeary = ((round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10) %% 2)
table(pockets$pocketGeary)
pockets$pocketGeary = (round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10))
pockets$pocketGeary = (round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10)
table(pockets$pocketGeary)
pockets$pocketGeary = (round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10) %% 2 *2
table(pockets$pocketGeary)
pockets$pocketGeary = (round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10) %/% 2 * 2
table(pockets$pocketGeary)
pockets$pocketGeary = ((round(pockets$Pocket_GearyAuto_AvFlexibility30, 1) * 10) %/% 2 * 2) / 10
table(pockets$pocketGeary)
table(pockets$pocketA)
table(pockets$pocketG)
head(pockets)
?table
# look at number of bins and count per bin
table(data.frame(pockets$pocketGeary, pockets$Class))
table(pockets$pocketA, pockets$Class)
table(data.frame(pockets$pocketA, pockets$Class))
# look at number of bins and count per bin
table(data.frame(pockets$pocketGeary, pockets$Class))
table(data.frame(pockets$pocketA, pockets$Class))
table(data.frame(pockets$pocketG, pocket$Class))
table(data.frame(pockets$pocketG, pockets$Class))
install.packages('gam')
library(gam)
#fitting the Additive Regression Model which is linear in Year
fit_gam <- gam(Class ~ X2 + X3 + X2*X3 + s(pocketA) + s(pocketG) + s(pocketGeary), family=binomial, data=pockets)
plot(fit_gam, se=TRUE)
fit.gam.pocketA <- gam(Class ~ s(pocketA), family=binomial, data=pockets)
plot(fit.gam.pocketA, se=TRUE)
plot(fit.gam.pocketA, se=TRUE, shade = TRUE)
plot(fit.gam.pocketA, shade = TRUE)
plot(fit.gam.pocketA, se=TRUE)
# X’β = β0 + β1Xi1 + β2Xi2 + β3Xi1 Xi2 + β4Xi3 + β5Xi4 + β6Xi5
fit.pocket <- glm(Class ~ X2 + X3 + X2*X3 + pocketA + pocketG + pocketGeary, family=binomial, data=pockets)
#fitting the Additive Regression Model which is linear in Year
fit.gam.full <- gam(Class ~ X2 + X3 + X2*X3 + s(pocketA) + s(pocketG) + s(pocketGeary), family=binomial, data=pockets)
plot(fit.gam.full, se=TRUE)
fit.gam.pocketA <- gam(Class ~ s(pocketA), family=binomial, data=pockets)
plot(fit.gam.pocketA, se=TRUE)
head(pockets)
fit.gam.a <- gam(Class ~ s(Pocket_A), family=binomial, data=pockets)
plot(fit.gam.a, se=TRUE)
plot(fit.gam.pocketA, se=TRUE)
plot(fit.gam.pocketA, se=TRUE)
plot(fit.gam.pocketA, se=TRUE)
plot(fit.gam.a, se=TRUE)
fit.pocketA <- glm(Class ~ s(pocketA), family=binomial, data=pockets)
plot(fit.pocketA, se=TRUE)
fit.pocketA <- glm(Class ~ s(pocketA), family=binomial, data=pockets)
plot(fit.pocketA, se=TRUE)
plot(Class ~ pocketA, data=pockets, se=TRUE)
pockets$pocketA
table(data.frame(pockets$pocketA, pockets$Class))
tableA <- table(data.frame(pockets$pocketA, pockets$Class))
data(pima)
# ---------------------Fit the full model-----------------------------
fit <- glm(test ~., family=binomial, data=pima)
summary(fit)
# -------------------------Residual diagnostics-------------------------
# Pearson residuals vs predicted response
plot( residuals(fit, type="pearson") ~ predict(fit, type="response"),
xlab=expression(hat(pi)), ylab="Pearson Residual")
# Pearson residuals vs predicted link
plot(residuals(fit, type="pearson") ~ predict(fit,type="link"),
xlab=expression(hat(eta)), ylab="Pearson Residual")
# Deviance residuals vs predicted response
plot( residuals(fit, type="deviance") ~ predict(fit, type="response"),
xlab=expression(hat(pi)), ylab="Deviance Residual")
# Studentized residuals vs predicted response
plot( rstudent(fit) ~ predict(fit, type="response"),
xlab=expression(hat(pi)), ylab="Studentized Residual")
# Cooks distance
plot(cooks.distance(fit) ~ predict(fit,type="response"),
xlab=expression(hat(pi)), ylab="Cooks distance")
V_H_Df
summary(fit_V_H)
# X’β = β0 + β1Xi1 + β2Xi2 + β3Xi1 Xi2 + β4Xi3 + β5Xi4 + β6Xi5
fit.pocket <- glm(Class ~ X2 + X3 + X2*X3 + pocketA + pocketG + pocketGeary, family=binomial, data=pockets)
summary(fit.pocket)
using residuals plot, Wald CI for the parameters, and Pearson Chi-squared test for goodness of fit and the log likelihood ratio tests
confint(fit.pocket)
# log likelihood ratio tests
lrtest(fit_V_H_VH, fit.pocket)
fit_V_H_VH)
summary(fit_V_H_VH)
# log likelihood ratio tests
summary(fit_V_H_VH)
fit_V_H_VH <- glm(disease ~ vol + hDonor + vol*hDonor, family=binomial, data=mutations_small)
# log likelihood ratio tests
summary(fit_V_H_VH)
lrtest(fit_V_H_VH, fit.pocket)
fit.simple <- glm(Class ~ X2 + X3 + X2*X3, family=binomial, data=mutations)
lrtest(fit.simple, fit.pocket)
fit.simple <- glm(Class ~ X2 + X3 + X2*X3, family=binomial, data=mutations)
fit.simple <- glm(Class ~ X2 + X3 + X2*X3, family=binomial, data=pockets)
summary(fit.simple)
lrtest(fit.simple, fit.pocket)
# Pearson residuals vs predicted response
plot( residuals(fit.pocket, type="pearson") ~ predict(fit.pocket, type="response"),
xlab=expression(hat(pi)), ylab="Pearson Residual")
# Pearson residuals vs predicted link
plot(residuals(fit.pocket, type="pearson") ~ predict(fit.pocket,type="link"),
xlab=expression(hat(eta)), ylab="Pearson Residual")
# Pearson residuals vs predicted link
plot(residuals(fit.pocket, type="pearson") ~ predict(fit.pocket,type="link"),
xlab=expression(hat(eta)), ylab="Pearson Residual")
# Deviance residuals vs predicted response
plot( residuals(fit.pocket, type="deviance") ~ predict(fit.pocket, type="response"),
xlab=expression(hat(pi)), ylab="Deviance Residual")
